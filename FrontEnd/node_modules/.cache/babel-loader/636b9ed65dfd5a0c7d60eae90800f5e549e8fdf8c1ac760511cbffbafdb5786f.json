{"ast":null,"code":"var _jsxFileName = \"/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PredictForecast() {\n  _s();\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [predictionsData] = useState(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name);\n  };\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://localhost:5050/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob'\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'output.zip');\n      document.body.appendChild(link);\n      link.click();\n\n      // Update the downloadUrl state variable\n      setDownloadUrl(url);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"predict-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Future Demand Forecast Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Upload Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"file-upload-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-upload-button\",\n            children: \"Choose File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected file: \", fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleProcess,\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), predictionsData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Predictions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: predictionsData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n            href: downloadUrl,\n            download: \"output.zip\",\n            children: \"Download Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(PredictForecast, \"Ov7/7puq31s6Efh7UO3ofY7poaU=\");\n_c = PredictForecast;\nexport default PredictForecast;\nvar _c;\n$RefreshReg$(_c, \"PredictForecast\");","map":{"version":3,"names":["React","useState","axios","saveAs","jsxDEV","_jsxDEV","PredictForecast","_s","fileName","setFileName","file","setFile","downloadUrl","setDownloadUrl","predictionsData","handleFileUpload","event","target","files","type","alert","name","handleProcess","formData","FormData","append","response","post","headers","responseType","url","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","error","console","className","children","_jsxFileName","lineNumber","columnNumber","onChange","onClick","download","_c","$RefreshReg$"],"sources":["/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\nimport { saveAs } from 'file-saver';\n\nfunction PredictForecast() {\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [predictionsData] = useState(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name); \n  };  \n\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n  \n    const formData = new FormData();\n    formData.append('file', file);\n  \n    try {\n      const response = await axios.post('http://localhost:5050/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob'\n      });\n  \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'output.zip');\n      document.body.appendChild(link);\n      link.click();\n  \n      // Update the downloadUrl state variable\n      setDownloadUrl(url);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n\n  return (\n    <div className=\"predict-forecast\">\n      <h1>Future Demand Forecast Prediction</h1>\n      <p>This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.</p>\n      <div className=\"input-output-container\">\n        <div className=\"input-section\">\n          <h1>Upload Data</h1>\n          <label className=\"file-upload-container\">\n            <input type=\"file\" onChange={handleFileUpload} />\n            <span className=\"file-upload-button\">Choose File</span>\n          </label>\n          {fileName && <p>Selected file: {fileName}</p>}\n          <div className=\"button-container\">\n            <button onClick={handleProcess}>Predict</button>\n          </div>\n        </div>\n        <div className=\"output-section\">\n          <h1>Output</h1>\n          {predictionsData && (\n            <div>\n              <h3>Predictions:</h3>\n              <pre>{predictionsData}</pre>\n            </div>\n          )}\n          <div className=\"button-container\">\n          {downloadUrl && (<a href={downloadUrl} download=\"output.zip\">Download Output</a>)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PredictForecast;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}