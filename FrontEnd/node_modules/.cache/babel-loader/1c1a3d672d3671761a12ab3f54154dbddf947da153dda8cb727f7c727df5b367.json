{"ast":null,"code":"var _jsxFileName = \"/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PredictForecast() {\n  _s();\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [output, setOutput] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [predictionsData, setPredictionsData] = useState(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name);\n  };\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://localhost:5050/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob'\n      });\n      const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', 'output.zip');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"predict-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Future Demand Forecast Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Upload Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"file-upload-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-upload-button\",\n            children: \"Choose File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected file: \", fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleProcess,\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), predictionsData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Predictions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: predictionsData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: downloadUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => window.open(downloadUrl, '_blank'),\n            children: \"Download Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(PredictForecast, \"lzfCZAaD050//aNyppZZ+RxBtvY=\");\n_c = PredictForecast;\nexport default PredictForecast;\nvar _c;\n$RefreshReg$(_c, \"PredictForecast\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","PredictForecast","_s","fileName","setFileName","file","setFile","output","setOutput","downloadUrl","setDownloadUrl","predictionsData","setPredictionsData","handleFileUpload","event","target","files","type","alert","name","handleProcess","formData","FormData","append","response","post","headers","responseType","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","error","console","className","children","_jsxFileName","lineNumber","columnNumber","onChange","onClick","open","_c","$RefreshReg$"],"sources":["/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\n\nfunction PredictForecast() {\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [output, setOutput] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [predictionsData, setPredictionsData] = useState(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name); \n  };  \n\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n  \n    const formData = new FormData();\n    formData.append('file', file);\n  \n    try {\n      const response = await axios.post('http://localhost:5050/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob'\n      });\n  \n      const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', 'output.zip');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n\n  return (\n    <div className=\"predict-forecast\">\n      <h1>Future Demand Forecast Prediction</h1>\n      <p>This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.</p>\n      <div className=\"input-output-container\">\n        <div className=\"input-section\">\n          <h1>Upload Data</h1>\n          <label className=\"file-upload-container\">\n            <input type=\"file\" onChange={handleFileUpload} />\n            <span className=\"file-upload-button\">Choose File</span>\n          </label>\n          {fileName && <p>Selected file: {fileName}</p>}\n          <div className=\"button-container\">\n            <button onClick={handleProcess}>Predict</button>\n          </div>\n        </div>\n        <div className=\"output-section\">\n          <h1>Output</h1>\n          {predictionsData && (\n            <div>\n              <h3>Predictions:</h3>\n              <pre>{predictionsData}</pre>\n            </div>\n          )}\n          <div className=\"button-container\">\n          {downloadUrl && <button onClick={() => window.open(downloadUrl, '_blank')}>Download Output</button>}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PredictForecast;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}