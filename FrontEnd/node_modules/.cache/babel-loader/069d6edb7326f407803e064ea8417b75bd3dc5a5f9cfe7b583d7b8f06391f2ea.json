{"ast":null,"code":"var _jsxFileName = \"/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PredictForecast() {\n  _s();\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [plotBase64, setPlotBase64] = useState(null); // Define setPlotBase64\n\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name);\n  };\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Update the plotBase64 state variable\n      setPlotBase64(response.data.plot_base64);\n\n      // Download the file\n      const downloadResponse = await axios.get('/download');\n      const url = window.URL.createObjectURL(new Blob([downloadResponse.data]));\n      setDownloadUrl(url); // Use setDownloadUrl\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"predict-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Future Demand Forecast Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Upload Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"file-upload-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-upload-button\",\n            children: \"Choose File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected file: \", fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleProcess,\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), plotBase64 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Predictions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${plotBase64}`,\n            alt: \"Plot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: downloadUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n            href: downloadUrl,\n            className: \"download-link\",\n            download: \"output.zip\",\n            children: \"Download Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(PredictForecast, \"GGkcEKmXHE2qJPysO0AekRPnwQc=\");\n_c = PredictForecast;\nexport default PredictForecast;\nvar _c;\n$RefreshReg$(_c, \"PredictForecast\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PredictForecast","_s","fileName","setFileName","file","setFile","downloadUrl","setDownloadUrl","plotBase64","setPlotBase64","handleFileUpload","event","target","files","type","alert","name","handleProcess","formData","FormData","append","response","post","headers","data","plot_base64","downloadResponse","get","url","window","URL","createObjectURL","Blob","error","console","className","children","_jsxFileName","lineNumber","columnNumber","onChange","onClick","src","alt","href","download","_c","$RefreshReg$"],"sources":["/Users/amalshar/Desktop/ForecaStory-FinalYearProject/FrontEnd/src/components/PredictForecast.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './PredictForecast.css';\n\nfunction PredictForecast() {\n  const [fileName, setFileName] = useState(null);\n  const [file, setFile] = useState(null);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [plotBase64, setPlotBase64] = useState(null); // Define setPlotBase64\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type !== 'text/csv') {\n      alert('Invalid file type. Please upload a CSV file.');\n      return;\n    }\n    setFile(file);\n    setFileName(file.name); \n  };  \n\n  const handleProcess = async () => {\n    if (!file) {\n      alert('Please upload a file first.');\n      return;\n    }\n  \n    const formData = new FormData();\n    formData.append('file', file);\n  \n    try {\n      const response = await axios.post('/process', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Update the plotBase64 state variable\n      setPlotBase64(response.data.plot_base64);\n  \n      // Download the file\n      const downloadResponse = await axios.get('/download');\n      const url = window.URL.createObjectURL(new Blob([downloadResponse.data]));\n      setDownloadUrl(url); // Use setDownloadUrl\n    } catch (error) {\n      console.error('Error processing file:', error);\n      alert('An error occurred while processing the file.');\n    }\n  };\n\n  return (\n    <div className=\"predict-forecast\">\n      <h1>Future Demand Forecast Prediction</h1>\n      <p>This will allow you to predict future demand based on historical data. Upload a CSV file with your data, and it will process it and provide a forecast.</p>\n      <div className=\"input-output-container\">\n        <div className=\"input-section\">\n          <h1>Upload Data</h1>\n          <label className=\"file-upload-container\">\n            <input type=\"file\" onChange={handleFileUpload} />\n            <span className=\"file-upload-button\">Choose File</span>\n          </label>\n          {fileName && <p>Selected file: {fileName}</p>}\n          <div className=\"button-container\">\n            <button onClick={handleProcess}>Predict</button>\n          </div>\n        </div>\n        <div className=\"output-section\">\n          <h1>Output</h1>\n          {plotBase64 && (\n            <div>\n              <h3>Predictions:</h3>\n              <img src={`data:image/png;base64,${plotBase64}`} alt=\"Plot\" />\n            </div>\n          )}\n          <div className=\"button-container\">\n          {downloadUrl && (<a href={downloadUrl} className=\"download-link\" download=\"output.zip\">Download Output</a>)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PredictForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}